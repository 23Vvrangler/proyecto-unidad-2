server:
  port: 8080


eureka:
  client:
    serviceUrl:
      #defaultZone: http://localhost:8090/eureka
      defaultZone: ${EUREKA_URI:http://localhost:8090/eureka}
  instance:
    #hostname: localhost
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
spring:
  cloud:
    gateway:
      # globalcors:
      #   corsConfigurations:
      #     '[/**]':
      #       allowedOrigins: "http://localhost:5173"
      #       allowedHeaders: "*"
      #       allowedMethods:
      #         - GET
      #         - POST
      #         - PUT
      #         - DELETE
      discovery:
        locator:
          enable: true
      routes:
        - id: ms-auth-service
          uri: lb://ms-auth-service
          predicates:
            - Path=/auth/**
        - id: ms-lugar-service
          uri: lb://ms-lugar-service
          predicates:
            - Path=/categorias-lugar/**, /lugares/**
        - id: ms-reserva-service
          uri: lb://ms-reserva-service
          predicates:
            - Path=/reservas/**
        - id: ms-message-service # Un ID único para esta ruta
          uri: lb://ms-message-service # El nombre de servicio que ms-message-service registra en Eureka
          predicates:
            - Path=/chat/**, /ws/** # Rutas REST para APIs del chat (ej. /chat/history, /chat/users)
            # Predicate para el endpoint WebSocket
            # Es crucial que el Gateway rutee el WebSocket handshake.
            # El Path debe coincidir con el endpoint que definiste en WebSocketConfig.java (registry.addEndpoint("/ws"))
            # - Path=/ws/** # Para el endpoint WebSocket principal (ws://gateway-url/ws)
          # Opcional: Si necesitas manejar CORS específicamente para esta ruta
          # filters:
          #   - RewritePath=/websocket/(?<remaining>.*), /ws/${remaining} # Ejemplo si el cliente llama /websocket en vez de /ws
          #   - DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials, RETAIN
